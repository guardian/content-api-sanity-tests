---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Content API - Sanity Tests'
Parameters:
  Stage:
    Description: 'Environment name'
    Type: String
    Default: PROD
  VPC:
    Description: 'Virtual Private Cloud to run EC2 instances within'
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: 'Subnets to run load balancer within'
    Type: List<AWS::EC2::Subnet::Id>
  AlarmTopic:
    Description: 'A SNS topic ARN for Cloudwatch alerts'
    Type: String
  CloudwatchNamespace:
    Type: String
    Default: content-api-sanity-tests
  AMI:
    Description: 'AMI ID'
    Type: AWS::EC2::Image::Id
    Default: ami-b0be07c3
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  CloudwatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudwatch-put
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
          Resource: arn:aws:logs:*:*:*
      Roles:
      - !Ref Role
  DownloadStuffFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: download-config-and-artifact-from-s3
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: s3:GetObject
          Resource:
          - arn:aws:s3::*:content-api-config/*
          - arn:aws:s3::*:content-api-dist/*
          - arn:aws:s3::*:content-api-sanity-tests-dist/*
      Roles:
      - !Ref Role
  ElasticSearchSnapshotsS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ElasticSearchSnapshotsS3Policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:ListBucket
          Resource:
          - arn:aws:s3::*:content-api-es-snapshots/*
      Roles:
      - !Ref Role
  DescribeInstancesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ec2:DescribeInstances
            Effect: Allow
            Resource: '*'
      PolicyName: ec2-describe-instances
      Roles:
        - !Ref Role
  Ec2DescribeAutoScalingGroupsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ec2-describe-autoscaling-groups
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
            Resource: "*"
      Roles:
        - !Ref Role
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref Role
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets
      CrossZone: true
      Listeners:
      - Protocol: HTTP
        LoadBalancerPort: '9000'
        InstancePort: '9000'
      HealthCheck:
        Target: HTTP:9000/healthcheck
        Timeout: '5'
        Interval: '10'
        UnhealthyThreshold: '2'
        HealthyThreshold: '2'
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      AvailabilityZones: { 'Fn::GetAZs': '' }
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames: 
      - !Ref LoadBalancer
      Tags:
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: 'true'
      - Key: Stack
        Value: content-api-sanity-tests
        PropagateAtLaunch: 'true'
      - Key: App
        Value: sanity-tests
        PropagateAtLaunch: 'true'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      AssociatePublicIpAddress: true
      SecurityGroups: 
      - !Ref SecurityGroup
      - !Ref WazuhSecurityGroup
      InstanceType: t3.micro
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -ev
            
            adduser --disabled-password content-api
            
            cd /home/content-api
          
            aws --region eu-west-1 s3 cp s3://content-api-dist/content-api-sanity-tests/${Stage}/sanity-tests/sanity-tests_1.0_all.deb /home/content-api/sanity-tests_1.0_all.deb
            dpkg -i /home/content-api/sanity-tests_1.0_all.deb
            aws --region eu-west-1 s3 cp s3://content-api-config/content-api-sanity-tests/${Stage}/sanity-tests/content-api-sanity-tests.conf /usr/share/sanity-tests/conf/content-api-sanity-tests.conf
            ln -s /usr/share/sanity-tests /home/content-api/sanity-tests
            echo JAVA_OPTS=\"-Dpidfile.path=/var/run/sanity-tests/sanity-tests.pid -Dconfig.file=/usr/share/sanity-tests/conf/content-api-sanity-tests.conf -Dplay.http.secret.key=kkMQbRpa1ttyM0oXwlyPwd5ODNeFMv63h452itOGzWulEUipJjMfm73\" >> /etc/default/sanity-tests
            mkdir logs                     
            
            systemctl start sanity-tests
            /opt/cloudwatch-logs/configure-logs application content-api-sanity-tests ${Stage} sanity-tests /home/content-api/logs/sanity-tests.log

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public access to the load balancer on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 0.0.0.0/0
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 77.91.248.0/21
  WazuhSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic from wazuh agent to manager
      VpcId:
        !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1514
          ToPort: 1515
          CidrIp: 0.0.0.0/0
  NotEnoughSuccessfulTestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub content-api-sanity-tests-${Stage}-alarm-not-enough-successful-tests
      AlarmDescription: 'Fewer than 100 tests in 5 minutes (we expect to run at least
        14 tests every 30 seconds)'
      Namespace: !Ref CloudwatchNamespace
      MetricName: SuccessfulTests
      Statistic: Sum
      ComparisonOperator: LessThanThreshold
      Threshold: '100'
      Period: '300'
      EvaluationPeriods: '5'
      AlarmActions: 
      - !Ref AlarmTopic
Outputs:
  LoadBalancer:
    Value: !GetAtt LoadBalancer.DNSName
